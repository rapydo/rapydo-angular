name: Test

on:
  push:
  workflow_dispatch:

# Cancel previous running jobs on the same branch in case of new pushs
concurrency:
  group: tests-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    strategy:
      matrix:
        stage:
          [
            karma,
            cypress-lite,
            cypress-full,
            cypress-totp,
            cypress-hiddenlogin,
            prod,
          ]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: "16.x"
      - name: Install
        run: |
          python -m pip install --upgrade pip
          # version is "x.y.0": convert in x.y
          export CURRENT_VERSION=$(grep '"version"' src/package.json | awk {'print $2'} | tr -d '", ' | awk -F. {'print $1 "." $2'})
          pip install --upgrade --no-cache-dir git+https://github.com/rapydo/do.git@${CURRENT_VERSION}
          auth_services=(postgres neo4j)
          AUTH=${auth_services[$(($RANDOM % ${#auth_services[@]}))]}
          echo "Selected random authentication service = ${AUTH}"
          # Make the environment variable available to next steps
          echo "AUTH=${AUTH}" >> $GITHUB_ENV
          mkdir rapydo_tests
          cd rapydo_tests
          rapydo install compose
          rapydo --testing create prj --auth ${AUTH} --frontend angular --origin-url https://your_remote_git/your_project.git
          # This is to create a commit in the history to fill the BUILD variable
          git config --global user.email "tests@rapy.do"
          git config --global user.name "RAPyDo"
          git add -A && git commit -a -m "Initial commit"

      - name: Setup Cypress
        uses: rapydo/actions/setup-cypress@v1
        if: ${{ matrix.stage != 'karma' && matrix.stage != 'prod' && github.actor != 'dependabot[bot]' }}
        with:
          id: ${{ secrets.CYPRESS_PROJECT_ID }}
          key: ${{ secrets.CYPRESS_RECORD_KEY }}

      - name: Setup Project
        if: ${{ matrix.stage != 'karma' && matrix.stage != 'prod' }}
        run: |
          cd rapydo_tests

          rapydo --testing init
          rapydo add --force component sink

          rapydo pull --quiet

          STAGE="${{ matrix.stage }}"
          LABEL=${STAGE/cypress-/}

          if [[ "${LABEL}" == "full" ]]; then

            rapydo \
              -e API_AUTOSTART=1 \
              -e PROJECT_TITLE="Your ${AUTH} ${LABEL} Project" \
              -e ALLOW_TERMS_OF_USE=1 \
              -e AUTH_FORCE_FIRST_PASSWORD_CHANGE=1 \
              -e AUTH_MIN_PASSWORD_LENGTH=10 \
              -e AUTH_MAX_LOGIN_ATTEMPTS=10 \
              -e AUTH_MAX_PASSWORD_VALIDITY=120 \
              -e AUTH_DISABLE_UNUSED_CREDENTIALS_AFTER=60 \
              start

          elif [[ "${LABEL}" == "totp" ]]; then

            rapydo \
              -e API_AUTOSTART=1 \
              -e PROJECT_TITLE="Your ${AUTH} ${LABEL} Project" \
              -e ALLOW_TERMS_OF_USE=1 \
              -e AUTH_FORCE_FIRST_PASSWORD_CHANGE=1 \
              -e AUTH_MIN_PASSWORD_LENGTH=12 \
              -e AUTH_MAX_LOGIN_ATTEMPTS=10 \
              -e AUTH_MAX_PASSWORD_VALIDITY=120 \
              -e AUTH_DISABLE_UNUSED_CREDENTIALS_AFTER=60 \
              -e AUTH_SECOND_FACTOR_AUTHENTICATION=1 \
              -e AUTH_TOTP_VALIDITY_WINDOW=10 \
              start

          elif [[ "${LABEL}" == "hiddenlogin" ]]; then

            rapydo \
              -e API_AUTOSTART=1 \
              -e PROJECT_TITLE="Your ${AUTH} ${LABEL} Project" \
              -e SHOW_LOGIN=0 \
              start

          else

            rapydo \
              -e API_AUTOSTART=1 \
              -e PROJECT_TITLE="Your ${AUTH} ${LABEL} Project" \
              start

          fi

          sleep 30
          rapydo logs
          rapydo shell frontend "yarn install"
          rapydo shell frontend "yarn workspaces focus --all"
          rapydo shell frontend "reload-types"
          rapydo logs

      - name: Run Karma
        if: ${{ matrix.stage == 'karma' }}
        run: |
          cd rapydo_tests
          rapydo --testing init
          rapydo pull --quiet frontend
          rapydo start frontend
          sleep 5
          rapydo shell frontend "yarn install"
          rapydo shell frontend "yarn workspaces focus --all"
          rapydo shell frontend "reload-types"
          rapydo shell frontend "yarn run test:single"

      - name: Run Cypress
        if: ${{ matrix.stage != 'karma' && matrix.stage != 'prod' }}
        run: |
          cd rapydo_tests

          STAGE="${{ matrix.stage }}"
          LABEL=${STAGE/cypress-/}

          if [[ "${{github.actor}}" == "dependabot[bot]" ]]; then
            rapydo shell frontend "yarn run cypress:start:norecord"
          else
            rapydo shell frontend "yarn run cypress:start:${LABEL}"
          fi

          rapydo shell frontend "npx nyc --all report --reporter=lcov --report-dir /coverage"

      - name: Run Production Tests
        if: ${{ matrix.stage == 'prod' }}
        run: |
          cd rapydo_tests
          rapydo --testing --prod init

          rapydo add --force component sink

          rapydo pull --quiet
          rapydo start frontend proxy
          rapydo logs --follow frontend
          rapydo logs --tail 6 frontend 2>&1 | grep "files have been compressed."
          rapydo logs --tail 20 proxy
          curl --insecure -X GET https://localhost

          opt="--silent --head --insecure -X GET https://localhost"

          # A lot of urls serve the index.html, so that the expected response is:
          # 200 OK, content-type html, no-cache and CSP enabled

          echo -e "\n**** Testing index.html HTTP response ****"
          curl $opt | grep -E "^HTTP/.+ 200"
          curl $opt/ | grep -E "^HTTP/.+ 200"
          curl $opt/index.html | grep -E "^HTTP/.+ 200"
          curl $opt/app | grep -E "^HTTP/.+ 200"
          curl $opt/app/ | grep -E "^HTTP/.+ 200"
          curl $opt/app/index.html | grep -E "^HTTP/.+ 200"
          curl $opt/app/anything | grep -E "^HTTP/.+ 200"
          curl $opt/public | grep -E "^HTTP/.+ 200"
          curl $opt/public/ | grep -E "^HTTP/.+ 200"
          curl $opt/public/index.html | grep -E "^HTTP/.+ 200"
          curl $opt/public/anything | grep -E "^HTTP/.+ 200"

          echo -e "\n**** Testing index.html cache-control ****"
          curl $opt | grep "cache-control: no-store"
          curl $opt/ | grep "cache-control: no-store"
          curl $opt/index.html | grep "cache-control: no-store"
          curl $opt/app | grep "cache-control: no-store"
          curl $opt/app/ | grep "cache-control: no-store"
          curl $opt/app/index.html | grep "cache-control: no-store"
          curl $opt/app/anything | grep "cache-control: no-store"
          curl $opt/public | grep "cache-control: no-store"
          curl $opt/public/ | grep "cache-control: no-store"
          curl $opt/public/index.html | grep "cache-control: no-store"
          curl $opt/public/anything | grep "cache-control: no-store"

          echo -e "\n**** Testing index.html CSP header ****"
          curl $opt | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/ | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/index.html | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/app | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/app/ | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/app/index.html | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/app/anything | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/public | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/public/ | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/public/index.html | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/public/anything | grep -i "Content-Security-Policy: frame-ancestors"

          echo -e "\n**** Testing index.html Content-Type ****"
          curl $opt | grep -i "Content-Type: text/html"
          curl $opt/ | grep -i "Content-Type: text/html"
          curl $opt/index.html | grep -i "Content-Type: text/html"
          curl $opt/app | grep -i "Content-Type: text/html"
          curl $opt/app/ | grep -i "Content-Type: text/html"
          curl $opt/app/index.html | grep -i "Content-Type: text/html"
          curl $opt/app/anything | grep -i "Content-Type: text/html"
          curl $opt/public | grep -i "Content-Type: text/html"
          curl $opt/public/ | grep -i "Content-Type: text/html"
          curl $opt/public/index.html | grep -i "Content-Type: text/html"
          curl $opt/public/anything | grep -i "Content-Type: text/html"

          echo -e "\n**** Testing index.html gzip encoding ****"
          curl $opt --header 'accept-encoding: gzip' | grep "content-encoding: gzip"
          curl $opt/ --header 'accept-encoding: gzip' | grep "content-encoding: gzip"
          curl $opt/index.html --header 'accept-encoding: gzip' | grep "content-encoding: gzip"
          curl $opt/app --header 'accept-encoding: gzip' | grep "content-encoding: gzip"
          curl $opt/app/ --header 'accept-encoding: gzip' | grep "content-encoding: gzip"
          curl $opt/app/index.html --header 'accept-encoding: gzip' | grep "content-encoding: gzip"
          curl $opt/app/anything --header 'accept-encoding: gzip' | grep "content-encoding: gzip"
          curl $opt/public --header 'accept-encoding: gzip' | grep "content-encoding: gzip"
          curl $opt/public/ --header 'accept-encoding: gzip' | grep "content-encoding: gzip"
          curl $opt/public/index.html --header 'accept-encoding: gzip' | grep "content-encoding: gzip"
          curl $opt/public/anything --header 'accept-encoding: gzip' | grep "content-encoding: gzip"

          # unrecognized patterns have to respond with a 404
          echo -e "\n**** Testing invalid path ****"
          curl $opt/anything | grep -E "^HTTP/.+ 404"

          # favicon is expected to be found with content-type image/x-icon and CSP Enabled
          # cache is expected to be set a 1 month (2592000)
          echo -e "\n**** Testing favicon.ico ****"
          curl $opt/app/custom/assets/favicon/favicon.ico | grep -E "^HTTP/.+ 200"
          curl $opt/app/custom/assets/favicon/favicon.ico | grep "cache-control: max-age=2592000"
          curl $opt/app/custom/assets/favicon/favicon.ico | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/app/custom/assets/favicon/favicon.ico | grep -i "Content-Type: image/x-icon"

          # asset names are dinamically generated at build type... extract it from the index.html..
          asset=`curl --silent --insecure -X GET https://localhost | grep -o "styles\..*.css"`

          echo -e "\n**** Testing ${asset} ****"
          # assets are expected to be found with proper content-type and CSP Enabled
          # cache is expected to be set a 1 year (31557600)
          curl $opt/$asset | grep -E "^HTTP/.+ 200"
          curl $opt/$asset | grep "cache-control: max-age=31557600"
          curl $opt/$asset | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/$asset | grep -i "Content-Type: text/css"
          curl $opt/$asset --header 'accept-encoding: gzip' | grep "content-encoding: gzip"

          echo -e "\n**** Testing Access-Control-Allow-Origin ****"
          curl $opt | grep -i "Access-Control-Allow-Origin: https://localhost"
          curl $opt/ | grep -i "Access-Control-Allow-Origin: https://localhost"
          curl $opt/index.html | grep -i "Access-Control-Allow-Origin: https://localhost"
          curl $opt/app | grep -i "Access-Control-Allow-Origin: https://localhost"
          curl $opt/app/ | grep -i "Access-Control-Allow-Origin: https://localhost"
          curl $opt/app/index.html | grep -i "Access-Control-Allow-Origin: https://localhost"
          curl $opt/app/anything | grep -i "Access-Control-Allow-Origin: https://localhost"
          curl $opt/public | grep -i "Access-Control-Allow-Origin: https://localhost"
          curl $opt/public/ | grep -i "Access-Control-Allow-Origin: https://localhost"
          curl $opt/public/index.html | grep -i "Access-Control-Allow-Origin: https://localhost"
          curl $opt/public/anything | grep -i "Access-Control-Allow-Origin: https://localhost"

          echo -e "\n"

          npm install -g cypress@10.0.2
          echo '
          const { defineConfig } = require('cypress')

          module.exports = defineConfig({
            e2e: {
              supportFile: false,
              specPattern: 'submodules/rapydo-angular/cypress/prod-test.js',
            },
          });
          ' > cypress.config.js;

          cypress run --browser chrome

          # Verify that the frontend correctly builds also when SSR is disabled
          rapydo remove
          rapydo -e ENABLE_ANGULAR_SSR=0 start
          rapydo logs --follow frontend
          rapydo logs --tail 6 frontend 2>&1 | grep "files have been compressed."
          curl --insecure -X GET https://localhost

      - name: Coverage
        uses: rapydo/actions/coverage@v1
        if: ${{ matrix.stage != 'prod' }}
        with:
          repository: rapydo_tests/submodules/rapydo-angular
          cov_file: rapydo_tests/data/prj/karma/lcov.info

      - name: Print backend logs on failure
        if: ${{ failure() && matrix.stage != 'karma' && matrix.stage != 'prod' }}
        run: cat rapydo_tests/data/logs/backend-server.log

      - name: Print mocked email on failure
        if: ${{ failure() && matrix.stage != 'karma' && matrix.stage != 'prod' }}
        run: cat rapydo_tests/data/logs/mock.mail.*.body 2>/dev/null || true

      - name: Docker logs on failure
        if: failure()
        run: |
          cd rapydo_tests
          rapydo logs
