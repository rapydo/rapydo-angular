name: Prod

on:
  push:
  pull_request:
  workflow_dispatch:

# Cancel previous running jobs on the same branch in case of new pushs
concurrency:
  group: prod-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: "16.x"
      - name: Install
        env:
          REF_BRANCH: ${{ github.ref }}
          HEAD_REF_BRANCH: ${{ github.head_ref }}

        run: |
          python -m pip install --upgrade pip
          # version is "x.y.0": convert in x.y
          export CURRENT_VERSION=$(grep '"version"' src/package.json | awk {'print $2'} | tr -d '", ' | awk -F. {'print $1 "." $2'})
          pip install --upgrade --no-cache-dir git+https://github.com/rapydo/do.git@${CURRENT_VERSION}
          mkdir rapydo_tests
          cd rapydo_tests
          rapydo install compose
          rapydo --testing create prj --auth no --frontend angular --origin-url https://your_remote_git/your_project.git

          # REF contains the branch when commit, but contains refs/pull/XXX/merge on PRs
          # with PRs use HEAD_REF
          # Strip out refs/heads/ prefix
          if [[ ! -z $HEAD_REF_BRANCH ]];
          then
            BRANCH=${HEAD_REF_BRANCH/refs\/heads\//}
          else
            BRANCH=${REF_BRANCH/refs\/heads\//}
          fi
          # Also strip out tags from the branch
          BRANCH=${BRANCH/refs\/tags\/v/}
          echo "Forcing rapydo-angular to branch ${BRANCH}"
          echo "  submodules:" >> projects/neo/project_configuration.yaml
          echo "    rapydo-angular:" >> projects/neo/project_configuration.yaml
          echo "      branch: \"${BRANCH}\"" >> projects/neo/project_configuration.yaml

          # This is to create a commit in the history to fill the BUILD variable
          git config --global user.email "tests@rapy.do"
          git config --global user.name "RAPyDo"
          git add -A && git commit -a -m "Initial commit"

      - name: Run Production Tests
        run: |
          cd rapydo_tests
          rapydo --testing --prod init

          rapydo add --force component sink

          rapydo pull --quiet
          rapydo start frontend proxy
          rapydo logs --follow frontend
          rapydo logs --tail 6 frontend 2>&1 | grep "files have been compressed."
          rapydo logs --tail 20 proxy
          curl --insecure -X GET https://localhost

          opt="--silent --head --insecure -X GET https://localhost"

          # A lot of urls serve the index.html, so that the expected response is:
          # 200 OK, content-type html, no-cache and CSP enabled

          echo -e "\n**** Testing index.html HTTP response ****"
          curl $opt | grep -E "^HTTP/.+ 200"
          curl $opt/ | grep -E "^HTTP/.+ 200"
          curl $opt/index.html | grep -E "^HTTP/.+ 200"
          curl $opt/app | grep -E "^HTTP/.+ 200"
          curl $opt/app/ | grep -E "^HTTP/.+ 200"
          curl $opt/app/index.html | grep -E "^HTTP/.+ 200"
          curl $opt/app/anything | grep -E "^HTTP/.+ 200"
          curl $opt/public | grep -E "^HTTP/.+ 200"
          curl $opt/public/ | grep -E "^HTTP/.+ 200"
          curl $opt/public/index.html | grep -E "^HTTP/.+ 200"
          curl $opt/public/anything | grep -E "^HTTP/.+ 200"

          echo -e "\n**** Testing index.html cache-control ****"
          curl $opt | grep "cache-control: no-store"
          curl $opt/ | grep "cache-control: no-store"
          curl $opt/index.html | grep "cache-control: no-store"
          curl $opt/app | grep "cache-control: no-store"
          curl $opt/app/ | grep "cache-control: no-store"
          curl $opt/app/index.html | grep "cache-control: no-store"
          curl $opt/app/anything | grep "cache-control: no-store"
          curl $opt/public | grep "cache-control: no-store"
          curl $opt/public/ | grep "cache-control: no-store"
          curl $opt/public/index.html | grep "cache-control: no-store"
          curl $opt/public/anything | grep "cache-control: no-store"

          echo -e "\n**** Testing index.html CSP header ****"
          curl $opt | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/ | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/index.html | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/app | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/app/ | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/app/index.html | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/app/anything | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/public | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/public/ | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/public/index.html | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/public/anything | grep -i "Content-Security-Policy: frame-ancestors"

          echo -e "\n**** Testing index.html Content-Type ****"
          curl $opt | grep -i "Content-Type: text/html"
          curl $opt/ | grep -i "Content-Type: text/html"
          curl $opt/index.html | grep -i "Content-Type: text/html"
          curl $opt/app | grep -i "Content-Type: text/html"
          curl $opt/app/ | grep -i "Content-Type: text/html"
          curl $opt/app/index.html | grep -i "Content-Type: text/html"
          curl $opt/app/anything | grep -i "Content-Type: text/html"
          curl $opt/public | grep -i "Content-Type: text/html"
          curl $opt/public/ | grep -i "Content-Type: text/html"
          curl $opt/public/index.html | grep -i "Content-Type: text/html"
          curl $opt/public/anything | grep -i "Content-Type: text/html"

          echo -e "\n**** Testing index.html gzip encoding ****"
          curl $opt --header 'accept-encoding: gzip' | grep "content-encoding: gzip"
          curl $opt/ --header 'accept-encoding: gzip' | grep "content-encoding: gzip"
          curl $opt/index.html --header 'accept-encoding: gzip' | grep "content-encoding: gzip"
          curl $opt/app --header 'accept-encoding: gzip' | grep "content-encoding: gzip"
          curl $opt/app/ --header 'accept-encoding: gzip' | grep "content-encoding: gzip"
          curl $opt/app/index.html --header 'accept-encoding: gzip' | grep "content-encoding: gzip"
          curl $opt/app/anything --header 'accept-encoding: gzip' | grep "content-encoding: gzip"
          curl $opt/public --header 'accept-encoding: gzip' | grep "content-encoding: gzip"
          curl $opt/public/ --header 'accept-encoding: gzip' | grep "content-encoding: gzip"
          curl $opt/public/index.html --header 'accept-encoding: gzip' | grep "content-encoding: gzip"
          curl $opt/public/anything --header 'accept-encoding: gzip' | grep "content-encoding: gzip"

          # unrecognized patterns have to respond with a 404
          echo -e "\n**** Testing invalid path ****"
          curl $opt/anything | grep -E "^HTTP/.+ 404"

          # favicon is expected to be found with content-type image/x-icon and CSP Enabled
          # cache is expected to be set a 1 month (2592000)
          echo -e "\n**** Testing favicon.ico ****"
          curl $opt/app/custom/assets/favicon/favicon.ico | grep -E "^HTTP/.+ 200"
          curl $opt/app/custom/assets/favicon/favicon.ico | grep "cache-control: max-age=2592000"
          curl $opt/app/custom/assets/favicon/favicon.ico | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/app/custom/assets/favicon/favicon.ico | grep -i "Content-Type: image/x-icon"

          # asset names are dinamically generated at build type... extract it from the index.html..
          asset=`curl --silent --insecure -X GET https://localhost | grep -o "styles\..*.css"`

          echo -e "\n**** Testing ${asset} ****"
          # assets are expected to be found with proper content-type and CSP Enabled
          # cache is expected to be set a 1 year (31557600)
          curl $opt/$asset | grep -E "^HTTP/.+ 200"
          curl $opt/$asset | grep "cache-control: max-age=31557600"
          curl $opt/$asset | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/$asset | grep -i "Content-Type: text/css"
          curl $opt/$asset --header 'accept-encoding: gzip' | grep "content-encoding: gzip"

          echo -e "\n**** Testing Access-Control-Allow-Origin ****"
          curl $opt | grep -i "Access-Control-Allow-Origin: https://localhost"
          curl $opt/ | grep -i "Access-Control-Allow-Origin: https://localhost"
          curl $opt/index.html | grep -i "Access-Control-Allow-Origin: https://localhost"
          curl $opt/app | grep -i "Access-Control-Allow-Origin: https://localhost"
          curl $opt/app/ | grep -i "Access-Control-Allow-Origin: https://localhost"
          curl $opt/app/index.html | grep -i "Access-Control-Allow-Origin: https://localhost"
          curl $opt/app/anything | grep -i "Access-Control-Allow-Origin: https://localhost"
          curl $opt/public | grep -i "Access-Control-Allow-Origin: https://localhost"
          curl $opt/public/ | grep -i "Access-Control-Allow-Origin: https://localhost"
          curl $opt/public/index.html | grep -i "Access-Control-Allow-Origin: https://localhost"
          curl $opt/public/anything | grep -i "Access-Control-Allow-Origin: https://localhost"

          echo -e "\n"

          # Verify that the frontend correctly builds also when SSR is disabled
          rapydo remove
          rapydo -e ENABLE_ANGULAR_SSR=0 start
          rapydo logs --follow frontend
          rapydo logs --tail 6 frontend 2>&1 | grep "files have been compressed."
          curl --insecure -X GET https://localhost

      - name: Docker logs on failure
        if: failure()
        run: |
          cd rapydo_tests
          rapydo logs
